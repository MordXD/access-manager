name: Monitoring & Alerts

on:
  schedule:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
    - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ API
      id: api-check
      run: |
        if [ "${{ matrix.environment }}" == "staging" ]; then
          URL="${{ secrets.STAGING_URL }}"
        else
          URL="${{ secrets.PROD_URL }}"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        curl -f -s "$URL/docs" > /dev/null
        curl -f -s "$URL/health" > /dev/null
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$URL/health")
        echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥
        if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
          echo "API response time too slow: ${RESPONSE_TIME}s"
          exit 1
        fi
    
    - name: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
      if: failure() && secrets.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å ${{ matrix.environment }}!
          API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ
          URL: ${{ matrix.environment == 'staging' && secrets.STAGING_URL || secrets.PROD_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  database-check:
    runs-on: ubuntu-latest
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
      run: |
        if [ "${{ matrix.environment }}" == "staging" ]; then
          DB_HOST="${{ secrets.STAGING_DB_HOST }}"
          DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}"
        else
          DB_HOST="${{ secrets.PROD_DB_HOST }}"
          DB_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}"
        fi
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL –∫–ª–∏–µ–Ω—Ç–∞
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U access_user -d access_db -c "SELECT 1;"
    
    - name: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ë–î
      if: failure() && secrets.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          üî¥ –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ ${{ matrix.environment }}!
          –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-test:
    runs-on: ubuntu-latest
    name: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      run: |
        cat > load-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        
        export let options = {
          stages: [
            { duration: '2m', target: 10 },
            { duration: '5m', target: 10 },
            { duration: '2m', target: 20 },
            { duration: '5m', target: 20 },
            { duration: '2m', target: 0 },
          ],
          thresholds: {
            http_req_duration: ['p(95)<2000'],
            http_req_failed: ['rate<0.05'],
          },
        };
        
        export default function () {
          let response = http.get('${{ secrets.STAGING_URL }}/docs');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 2s': (r) => r.timings.duration < 2000,
          });
          sleep(1);
        }
        EOF
        
        k6 run load-test.js
    
    - name: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if: always() && secrets.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#performance'
        text: |
          üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          Status: ${{ job.status }}
          –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-monitoring:
    runs-on: ubuntu-latest
    name: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    steps:
    - uses: actions/checkout@v4
    
    - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      run: |
        for url in "${{ secrets.STAGING_URL }}" "${{ secrets.PROD_URL }}"; do
          if [[ $url == https://* ]]; then
            domain=$(echo $url | sed 's|https://||' | cut -d'/' -f1)
            expiry=$(echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
            expiry_epoch=$(date -d "$expiry" +%s)
            current_epoch=$(date +%s)
            days_until_expiry=$(( (expiry_epoch - current_epoch) / 86400 ))
            
            echo "SSL certificate for $domain expires in $days_until_expiry days"
            
            if [ $days_until_expiry -lt 30 ]; then
              echo "WARNING: SSL certificate expires soon!"
              exit 1
            fi
          fi
        done
    
    - name: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å SSL
      if: failure() && secrets.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security'
        text: |
          ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏!
          –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  backup-verification:
    runs-on: ubuntu-latest
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    if: github.event_name == 'schedule'
    
    steps:
    - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
      run: |
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ kubectl –∏–ª–∏ API –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –±—ç–∫–∞–ø–æ–≤
        echo "Checking latest backup..."
        
        # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        # kubectl get jobs -n production -l app=db-backup --sort-by=.metadata.creationTimestamp
    
    - name: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –±—ç–∫–∞–ø–∞–º–∏
      if: failure() && secrets.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: |
          üíæ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏!
          –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 